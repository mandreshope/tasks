// Mocks generated by Mockito 5.4.4 from annotations
// in tasks/app/data/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:typed_data' as _i6;

import 'package:isar/isar.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:tasks/app/data/local/isar_service.dart' as _i4;
import 'package:tasks/app/data/local/task_data_source.dart' as _i10;
import 'package:tasks/app/data/models/task.dart' as _i7;
import 'package:tasks/app/data/repositories/task_repository.dart' as _i8;
import 'package:tasks/app/ui/states/task_view_state.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIsar_0 extends _i1.SmartFake implements _i2.Isar {
  _FakeIsar_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCollectionSchema_1<OBJ1> extends _i1.SmartFake
    implements _i2.CollectionSchema<OBJ1> {
  _FakeCollectionSchema_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQueryBuilder_2<OBJ1, R, S> extends _i1.SmartFake
    implements _i2.QueryBuilder<OBJ1, R, S> {
  _FakeQueryBuilder_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQuery_3<T> extends _i1.SmartFake implements _i2.Query<T> {
  _FakeQuery_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_4 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_5<T1> extends _i1.SmartFake implements _i3.Future<T1> {
  _FakeFuture_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIsarCollection_6<OBJ> extends _i1.SmartFake
    implements _i2.IsarCollection<OBJ> {
  _FakeIsarCollection_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IsarService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIsarService extends _i1.Mock implements _i4.IsarService {
  @override
  _i2.Isar get isar => (super.noSuchMethod(
        Invocation.getter(#isar),
        returnValue: _FakeIsar_0(
          this,
          Invocation.getter(#isar),
        ),
        returnValueForMissingStub: _FakeIsar_0(
          this,
          Invocation.getter(#isar),
        ),
      ) as _i2.Isar);

  @override
  set isar(_i2.Isar? _isar) => super.noSuchMethod(
        Invocation.setter(
          #isar,
          _isar,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<dynamic> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i3.Future<dynamic>.value(),
        returnValueForMissingStub: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);
}

/// A class which mocks [IsarCollection].
///
/// See the documentation for Mockito's code generation for more information.
class MockIsarCollection<OBJ> extends _i1.Mock
    implements _i2.IsarCollection<OBJ> {
  @override
  _i2.Isar get isar => (super.noSuchMethod(
        Invocation.getter(#isar),
        returnValue: _FakeIsar_0(
          this,
          Invocation.getter(#isar),
        ),
        returnValueForMissingStub: _FakeIsar_0(
          this,
          Invocation.getter(#isar),
        ),
      ) as _i2.Isar);

  @override
  _i2.CollectionSchema<OBJ> get schema => (super.noSuchMethod(
        Invocation.getter(#schema),
        returnValue: _FakeCollectionSchema_1<OBJ>(
          this,
          Invocation.getter(#schema),
        ),
        returnValueForMissingStub: _FakeCollectionSchema_1<OBJ>(
          this,
          Invocation.getter(#schema),
        ),
      ) as _i2.CollectionSchema<OBJ>);

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
        returnValueForMissingStub: _i5.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  _i3.Future<OBJ?> get(int? id) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [id],
        ),
        returnValue: _i3.Future<OBJ?>.value(),
        returnValueForMissingStub: _i3.Future<OBJ?>.value(),
      ) as _i3.Future<OBJ?>);

  @override
  OBJ? getSync(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getSync,
          [id],
        ),
        returnValueForMissingStub: null,
      ) as OBJ?);

  @override
  _i3.Future<List<OBJ?>> getAll(List<int>? ids) => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [ids],
        ),
        returnValue: _i3.Future<List<OBJ?>>.value(<OBJ?>[]),
        returnValueForMissingStub: _i3.Future<List<OBJ?>>.value(<OBJ?>[]),
      ) as _i3.Future<List<OBJ?>>);

  @override
  List<OBJ?> getAllSync(List<int>? ids) => (super.noSuchMethod(
        Invocation.method(
          #getAllSync,
          [ids],
        ),
        returnValue: <OBJ?>[],
        returnValueForMissingStub: <OBJ?>[],
      ) as List<OBJ?>);

  @override
  _i3.Future<OBJ?> getByIndex(
    String? indexName,
    List<Object?>? key,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByIndex,
          [
            indexName,
            key,
          ],
        ),
        returnValue: _i3.Future<OBJ?>.value(),
        returnValueForMissingStub: _i3.Future<OBJ?>.value(),
      ) as _i3.Future<OBJ?>);

  @override
  OBJ? getByIndexSync(
    String? indexName,
    List<Object?>? key,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByIndexSync,
          [
            indexName,
            key,
          ],
        ),
        returnValueForMissingStub: null,
      ) as OBJ?);

  @override
  _i3.Future<List<OBJ?>> getAllByIndex(
    String? indexName,
    List<List<Object?>>? keys,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllByIndex,
          [
            indexName,
            keys,
          ],
        ),
        returnValue: _i3.Future<List<OBJ?>>.value(<OBJ?>[]),
        returnValueForMissingStub: _i3.Future<List<OBJ?>>.value(<OBJ?>[]),
      ) as _i3.Future<List<OBJ?>>);

  @override
  List<OBJ?> getAllByIndexSync(
    String? indexName,
    List<List<Object?>>? keys,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllByIndexSync,
          [
            indexName,
            keys,
          ],
        ),
        returnValue: <OBJ?>[],
        returnValueForMissingStub: <OBJ?>[],
      ) as List<OBJ?>);

  @override
  _i3.Future<int> put(OBJ? object) => (super.noSuchMethod(
        Invocation.method(
          #put,
          [object],
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  int putSync(
    OBJ? object, {
    bool? saveLinks = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putSync,
          [object],
          {#saveLinks: saveLinks},
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i3.Future<List<int>> putAll(List<OBJ>? objects) => (super.noSuchMethod(
        Invocation.method(
          #putAll,
          [objects],
        ),
        returnValue: _i3.Future<List<int>>.value(<int>[]),
        returnValueForMissingStub: _i3.Future<List<int>>.value(<int>[]),
      ) as _i3.Future<List<int>>);

  @override
  List<int> putAllSync(
    List<OBJ>? objects, {
    bool? saveLinks = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAllSync,
          [objects],
          {#saveLinks: saveLinks},
        ),
        returnValue: <int>[],
        returnValueForMissingStub: <int>[],
      ) as List<int>);

  @override
  _i3.Future<int> putByIndex(
    String? indexName,
    OBJ? object,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #putByIndex,
          [
            indexName,
            object,
          ],
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  int putByIndexSync(
    String? indexName,
    OBJ? object, {
    bool? saveLinks = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putByIndexSync,
          [
            indexName,
            object,
          ],
          {#saveLinks: saveLinks},
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i3.Future<List<int>> putAllByIndex(
    String? indexName,
    List<OBJ>? objects,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAllByIndex,
          [
            indexName,
            objects,
          ],
        ),
        returnValue: _i3.Future<List<int>>.value(<int>[]),
        returnValueForMissingStub: _i3.Future<List<int>>.value(<int>[]),
      ) as _i3.Future<List<int>>);

  @override
  List<int> putAllByIndexSync(
    String? indexName,
    List<OBJ>? objects, {
    bool? saveLinks = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAllByIndexSync,
          [
            indexName,
            objects,
          ],
          {#saveLinks: saveLinks},
        ),
        returnValue: <int>[],
        returnValueForMissingStub: <int>[],
      ) as List<int>);

  @override
  _i3.Future<bool> delete(int? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  bool deleteSync(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteSync,
          [id],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i3.Future<int> deleteAll(List<int>? ids) => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [ids],
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  int deleteAllSync(List<int>? ids) => (super.noSuchMethod(
        Invocation.method(
          #deleteAllSync,
          [ids],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i3.Future<bool> deleteByIndex(
    String? indexName,
    List<Object?>? key,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteByIndex,
          [
            indexName,
            key,
          ],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  bool deleteByIndexSync(
    String? indexName,
    List<Object?>? key,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteByIndexSync,
          [
            indexName,
            key,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i3.Future<int> deleteAllByIndex(
    String? indexName,
    List<List<Object?>>? keys,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAllByIndex,
          [
            indexName,
            keys,
          ],
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  int deleteAllByIndexSync(
    String? indexName,
    List<List<Object?>>? keys,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAllByIndexSync,
          [
            indexName,
            keys,
          ],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i3.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void clearSync() => super.noSuchMethod(
        Invocation.method(
          #clearSync,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> importJsonRaw(_i6.Uint8List? jsonBytes) =>
      (super.noSuchMethod(
        Invocation.method(
          #importJsonRaw,
          [jsonBytes],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void importJsonRawSync(_i6.Uint8List? jsonBytes) => super.noSuchMethod(
        Invocation.method(
          #importJsonRawSync,
          [jsonBytes],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> importJson(List<Map<String, dynamic>>? json) =>
      (super.noSuchMethod(
        Invocation.method(
          #importJson,
          [json],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void importJsonSync(List<Map<String, dynamic>>? json) => super.noSuchMethod(
        Invocation.method(
          #importJsonSync,
          [json],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.QueryBuilder<OBJ, OBJ, _i2.QWhere> where({
    bool? distinct = false,
    _i2.Sort? sort = _i2.Sort.asc,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #where,
          [],
          {
            #distinct: distinct,
            #sort: sort,
          },
        ),
        returnValue: _FakeQueryBuilder_2<OBJ, OBJ, _i2.QWhere>(
          this,
          Invocation.method(
            #where,
            [],
            {
              #distinct: distinct,
              #sort: sort,
            },
          ),
        ),
        returnValueForMissingStub: _FakeQueryBuilder_2<OBJ, OBJ, _i2.QWhere>(
          this,
          Invocation.method(
            #where,
            [],
            {
              #distinct: distinct,
              #sort: sort,
            },
          ),
        ),
      ) as _i2.QueryBuilder<OBJ, OBJ, _i2.QWhere>);

  @override
  _i2.QueryBuilder<OBJ, OBJ, _i2.QFilterCondition> filter() =>
      (super.noSuchMethod(
        Invocation.method(
          #filter,
          [],
        ),
        returnValue: _FakeQueryBuilder_2<OBJ, OBJ, _i2.QFilterCondition>(
          this,
          Invocation.method(
            #filter,
            [],
          ),
        ),
        returnValueForMissingStub:
            _FakeQueryBuilder_2<OBJ, OBJ, _i2.QFilterCondition>(
          this,
          Invocation.method(
            #filter,
            [],
          ),
        ),
      ) as _i2.QueryBuilder<OBJ, OBJ, _i2.QFilterCondition>);

  @override
  _i2.Query<R> buildQuery<R>({
    List<_i2.WhereClause>? whereClauses = const [],
    bool? whereDistinct = false,
    _i2.Sort? whereSort = _i2.Sort.asc,
    _i2.FilterOperation? filter,
    List<_i2.SortProperty>? sortBy = const [],
    List<_i2.DistinctProperty>? distinctBy = const [],
    int? offset,
    int? limit,
    String? property,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #buildQuery,
          [],
          {
            #whereClauses: whereClauses,
            #whereDistinct: whereDistinct,
            #whereSort: whereSort,
            #filter: filter,
            #sortBy: sortBy,
            #distinctBy: distinctBy,
            #offset: offset,
            #limit: limit,
            #property: property,
          },
        ),
        returnValue: _FakeQuery_3<R>(
          this,
          Invocation.method(
            #buildQuery,
            [],
            {
              #whereClauses: whereClauses,
              #whereDistinct: whereDistinct,
              #whereSort: whereSort,
              #filter: filter,
              #sortBy: sortBy,
              #distinctBy: distinctBy,
              #offset: offset,
              #limit: limit,
              #property: property,
            },
          ),
        ),
        returnValueForMissingStub: _FakeQuery_3<R>(
          this,
          Invocation.method(
            #buildQuery,
            [],
            {
              #whereClauses: whereClauses,
              #whereDistinct: whereDistinct,
              #whereSort: whereSort,
              #filter: filter,
              #sortBy: sortBy,
              #distinctBy: distinctBy,
              #offset: offset,
              #limit: limit,
              #property: property,
            },
          ),
        ),
      ) as _i2.Query<R>);

  @override
  _i3.Future<int> count() => (super.noSuchMethod(
        Invocation.method(
          #count,
          [],
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  int countSync() => (super.noSuchMethod(
        Invocation.method(
          #countSync,
          [],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i3.Future<int> getSize({
    bool? includeIndexes = false,
    bool? includeLinks = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSize,
          [],
          {
            #includeIndexes: includeIndexes,
            #includeLinks: includeLinks,
          },
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  int getSizeSync({
    bool? includeIndexes = false,
    bool? includeLinks = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSizeSync,
          [],
          {
            #includeIndexes: includeIndexes,
            #includeLinks: includeLinks,
          },
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i3.Stream<void> watchLazy({bool? fireImmediately = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchLazy,
          [],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: _i3.Stream<void>.empty(),
        returnValueForMissingStub: _i3.Stream<void>.empty(),
      ) as _i3.Stream<void>);

  @override
  _i3.Stream<OBJ?> watchObject(
    int? id, {
    bool? fireImmediately = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchObject,
          [id],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: _i3.Stream<OBJ?>.empty(),
        returnValueForMissingStub: _i3.Stream<OBJ?>.empty(),
      ) as _i3.Stream<OBJ?>);

  @override
  _i3.Stream<void> watchObjectLazy(
    int? id, {
    bool? fireImmediately = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchObjectLazy,
          [id],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: _i3.Stream<void>.empty(),
        returnValueForMissingStub: _i3.Stream<void>.empty(),
      ) as _i3.Stream<void>);

  @override
  _i3.Future<void> verify(List<OBJ>? objects) => (super.noSuchMethod(
        Invocation.method(
          #verify,
          [objects],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> verifyLink(
    String? linkName,
    List<int>? sourceIds,
    List<int>? targetIds,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyLink,
          [
            linkName,
            sourceIds,
            targetIds,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [Task].
///
/// See the documentation for Mockito's code generation for more information.
class MockTask extends _i1.Mock implements _i7.Task {
  @override
  set id(int? _id) => super.noSuchMethod(
        Invocation.setter(
          #id,
          _id,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get title => (super.noSuchMethod(
        Invocation.getter(#title),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#title),
        ),
        returnValueForMissingStub: _i5.dummyValue<String>(
          this,
          Invocation.getter(#title),
        ),
      ) as String);

  @override
  set title(String? _title) => super.noSuchMethod(
        Invocation.setter(
          #title,
          _title,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set content(String? _content) => super.noSuchMethod(
        Invocation.setter(
          #content,
          _content,
        ),
        returnValueForMissingStub: null,
      );

  @override
  DateTime get date => (super.noSuchMethod(
        Invocation.getter(#date),
        returnValue: _FakeDateTime_4(
          this,
          Invocation.getter(#date),
        ),
        returnValueForMissingStub: _FakeDateTime_4(
          this,
          Invocation.getter(#date),
        ),
      ) as DateTime);

  @override
  set date(DateTime? _date) => super.noSuchMethod(
        Invocation.setter(
          #date,
          _date,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Status get status => (super.noSuchMethod(
        Invocation.getter(#status),
        returnValue: _i7.Status.completed,
        returnValueForMissingStub: _i7.Status.completed,
      ) as _i7.Status);

  @override
  set status(_i7.Status? _status) => super.noSuchMethod(
        Invocation.setter(
          #status,
          _status,
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i8.TaskRepository {
  @override
  _i3.Future<List<_i7.Task>> getAll({_i9.SortedBy? sort = _i9.SortedBy.date}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
          {#sort: sort},
        ),
        returnValue: _i3.Future<List<_i7.Task>>.value(<_i7.Task>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i7.Task>>.value(<_i7.Task>[]),
      ) as _i3.Future<List<_i7.Task>>);

  @override
  _i3.Future<List<_i7.Task>> getAllByStatus({
    required _i7.Status? status,
    _i9.SortedBy? sort = _i9.SortedBy.date,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllByStatus,
          [],
          {
            #status: status,
            #sort: sort,
          },
        ),
        returnValue: _i3.Future<List<_i7.Task>>.value(<_i7.Task>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i7.Task>>.value(<_i7.Task>[]),
      ) as _i3.Future<List<_i7.Task>>);

  @override
  _i3.Future<_i7.Task?> getTaskById({required int? id}) => (super.noSuchMethod(
        Invocation.method(
          #getTaskById,
          [],
          {#id: id},
        ),
        returnValue: _i3.Future<_i7.Task?>.value(),
        returnValueForMissingStub: _i3.Future<_i7.Task?>.value(),
      ) as _i3.Future<_i7.Task?>);

  @override
  _i3.Future<bool> add({required _i7.TaskDto? task}) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [],
          {#task: task},
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> markAsCompleted({required int? id}) => (super.noSuchMethod(
        Invocation.method(
          #markAsCompleted,
          [],
          {#id: id},
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> markAsInProgress({required int? id}) => (super.noSuchMethod(
        Invocation.method(
          #markAsInProgress,
          [],
          {#id: id},
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> update({
    required int? id,
    required _i7.TaskDto? taskDto,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [],
          {
            #id: id,
            #taskDto: taskDto,
          },
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> delete({required int? id}) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {#id: id},
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}

/// A class which mocks [Isar].
///
/// See the documentation for Mockito's code generation for more information.
class MockIsar extends _i1.Mock implements _i2.Isar {
  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
        returnValueForMissingStub: _i5.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  bool get isOpen => (super.noSuchMethod(
        Invocation.getter(#isOpen),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void requireOpen() => super.noSuchMethod(
        Invocation.method(
          #requireOpen,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<T> txn<T>(_i3.Future<T> Function()? callback) =>
      (super.noSuchMethod(
        Invocation.method(
          #txn,
          [callback],
        ),
        returnValue: _i5.ifNotNull(
              _i5.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #txn,
                  [callback],
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_5<T>(
              this,
              Invocation.method(
                #txn,
                [callback],
              ),
            ),
        returnValueForMissingStub: _i5.ifNotNull(
              _i5.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #txn,
                  [callback],
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_5<T>(
              this,
              Invocation.method(
                #txn,
                [callback],
              ),
            ),
      ) as _i3.Future<T>);

  @override
  _i3.Future<T> writeTxn<T>(
    _i3.Future<T> Function()? callback, {
    bool? silent = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeTxn,
          [callback],
          {#silent: silent},
        ),
        returnValue: _i5.ifNotNull(
              _i5.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #writeTxn,
                  [callback],
                  {#silent: silent},
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_5<T>(
              this,
              Invocation.method(
                #writeTxn,
                [callback],
                {#silent: silent},
              ),
            ),
        returnValueForMissingStub: _i5.ifNotNull(
              _i5.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #writeTxn,
                  [callback],
                  {#silent: silent},
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_5<T>(
              this,
              Invocation.method(
                #writeTxn,
                [callback],
                {#silent: silent},
              ),
            ),
      ) as _i3.Future<T>);

  @override
  T txnSync<T>(T Function()? callback) => (super.noSuchMethod(
        Invocation.method(
          #txnSync,
          [callback],
        ),
        returnValue: _i5.dummyValue<T>(
          this,
          Invocation.method(
            #txnSync,
            [callback],
          ),
        ),
        returnValueForMissingStub: _i5.dummyValue<T>(
          this,
          Invocation.method(
            #txnSync,
            [callback],
          ),
        ),
      ) as T);

  @override
  T writeTxnSync<T>(
    T Function()? callback, {
    bool? silent = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeTxnSync,
          [callback],
          {#silent: silent},
        ),
        returnValue: _i5.dummyValue<T>(
          this,
          Invocation.method(
            #writeTxnSync,
            [callback],
            {#silent: silent},
          ),
        ),
        returnValueForMissingStub: _i5.dummyValue<T>(
          this,
          Invocation.method(
            #writeTxnSync,
            [callback],
            {#silent: silent},
          ),
        ),
      ) as T);

  @override
  void attachCollections(Map<Type, _i2.IsarCollection<dynamic>>? collections) =>
      super.noSuchMethod(
        Invocation.method(
          #attachCollections,
          [collections],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.IsarCollection<T> collection<T>() => (super.noSuchMethod(
        Invocation.method(
          #collection,
          [],
        ),
        returnValue: _FakeIsarCollection_6<T>(
          this,
          Invocation.method(
            #collection,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeIsarCollection_6<T>(
          this,
          Invocation.method(
            #collection,
            [],
          ),
        ),
      ) as _i2.IsarCollection<T>);

  @override
  _i2.IsarCollection<dynamic>? getCollectionByNameInternal(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCollectionByNameInternal,
          [name],
        ),
        returnValueForMissingStub: null,
      ) as _i2.IsarCollection<dynamic>?);

  @override
  _i3.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void clearSync() => super.noSuchMethod(
        Invocation.method(
          #clearSync,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<int> getSize({
    bool? includeIndexes = false,
    bool? includeLinks = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSize,
          [],
          {
            #includeIndexes: includeIndexes,
            #includeLinks: includeLinks,
          },
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  int getSizeSync({
    bool? includeIndexes = false,
    bool? includeLinks = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSizeSync,
          [],
          {
            #includeIndexes: includeIndexes,
            #includeLinks: includeLinks,
          },
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i3.Future<void> copyToFile(String? targetPath) => (super.noSuchMethod(
        Invocation.method(
          #copyToFile,
          [targetPath],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<bool> close({bool? deleteFromDisk = false}) => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
          {#deleteFromDisk: deleteFromDisk},
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<void> verify() => (super.noSuchMethod(
        Invocation.method(
          #verify,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [TaskDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskDataSource extends _i1.Mock implements _i10.TaskDataSource {
  @override
  _i3.Future<List<_i7.Task>> getAll({_i9.SortedBy? sort = _i9.SortedBy.date}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
          {#sort: sort},
        ),
        returnValue: _i3.Future<List<_i7.Task>>.value(<_i7.Task>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i7.Task>>.value(<_i7.Task>[]),
      ) as _i3.Future<List<_i7.Task>>);

  @override
  _i3.Future<List<_i7.Task>> getAllByStatus({
    required _i7.Status? status,
    _i9.SortedBy? sort = _i9.SortedBy.date,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllByStatus,
          [],
          {
            #status: status,
            #sort: sort,
          },
        ),
        returnValue: _i3.Future<List<_i7.Task>>.value(<_i7.Task>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i7.Task>>.value(<_i7.Task>[]),
      ) as _i3.Future<List<_i7.Task>>);

  @override
  _i3.Future<_i7.Task?> getTaskById({required int? id}) => (super.noSuchMethod(
        Invocation.method(
          #getTaskById,
          [],
          {#id: id},
        ),
        returnValue: _i3.Future<_i7.Task?>.value(),
        returnValueForMissingStub: _i3.Future<_i7.Task?>.value(),
      ) as _i3.Future<_i7.Task?>);

  @override
  _i3.Future<bool> add({required _i7.TaskDto? task}) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [],
          {#task: task},
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> markAsCompleted({required int? id}) => (super.noSuchMethod(
        Invocation.method(
          #markAsCompleted,
          [],
          {#id: id},
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> markAsInProgress({required int? id}) => (super.noSuchMethod(
        Invocation.method(
          #markAsInProgress,
          [],
          {#id: id},
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> update({
    required int? id,
    required _i7.TaskDto? taskDto,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [],
          {
            #id: id,
            #taskDto: taskDto,
          },
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> delete({required int? id}) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {#id: id},
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}
